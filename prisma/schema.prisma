// ================== GENERATORS & DATASOURCE ==================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================== USER & AUTH ==================
model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relations
  accounts       Account[]
  sessions       Session[]
  userPreference UserPreference?
  bookmarks      Bookmark[]
  readArticles   ReadArticle[]
  readingHistory ReadingHistory[]
  notifications  UserNotification[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// ================== USER PREFERENCES ==================
model UserPreference {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Preferences
  interests           String[]  // Alias for categories
  sources             String[]
  language            String    @default("en")
  country             String    @default("us")

  // Additional fields from second schema
  categories          String[]  // ["business", "technology", "sports"]
  keywords            String[]  // ["AI", "cryptocurrency", "climate"]

  // Settings
  emailNotifications  Boolean   @default(false)
  pushNotifications   Boolean   @default(true)
  articlesPerDay      Int       @default(20)

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@map("user_preferences")
}

// ================== ARTICLES ==================
model Article {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  content     String?  @db.Text
  url         String   @unique
  urlToImage  String?
  publishedAt DateTime
  source      String
  author      String?
  category    String   @default("general")
  country     String   @default("us")
  language    String   @default("en")

  // AI-generated fields
  summary     String?  @db.Text
  sentiment   String?  // "positive", "negative", "neutral"
  keywords    String[] // AI extracted keywords
  topics      String[] // AI identified topics
  importance  Float?   @default(0.5) // 0.0 to 1.0

  // Relations
  bookmarks    Bookmark[]
  readArticles ReadArticle[]
  trending     TrendingTopic[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("articles")
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, articleId])
  @@map("bookmarks")
}

model ReadArticle {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  readAt    DateTime @default(now())
  readTime  Int?     // seconds spent reading

  @@unique([userId, articleId])
  @@map("read_articles")
}

// ================== READING HISTORY & PROCESSED ARTICLES ==================
model ReadingHistory {
  id          String   @id @default(cuid())
  userId      String
  articleId   String
  title       String
  category    String
  sentiment   String?
  timeSpent   Int?
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reading_history")
}

model ProcessedArticle {
  id          String   @id @default(cuid())
  articleId   String   @unique
  title       String
  summary     String
  sentiment   String
  keywords    String[]
  category    String
  processedAt DateTime @default(now())

  @@map("processed_articles")
}

// ================== NEW MODELS FROM SECOND SCHEMA ==================
model TrendingTopic {
  id          String   @id @default(cuid())
  topic       String
  score       Float    @default(1.0)
  category    String
  articles    Article[]
  mentions    Int      @default(1)
  sentiment   String?  // overall sentiment for this topic
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([topic, category])
}

model UserNotification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  message   String   @db.Text
  type      String   // "trending", "recommendation", "bookmark"
  read      Boolean  @default(false)
  data      Json?    // Additional data for the notification
  createdAt DateTime @default(now())
}

model Analytics {
  id           String   @id @default(cuid())
  date         DateTime @default(now())
  totalUsers   Int      @default(0)
  totalArticles Int     @default(0)
  totalViews   Int      @default(0)
  topCategories Json?   // {"business": 150, "technology": 200}
  topSources   Json?    // {"bbc": 100, "cnn": 120}
  sentimentBreakdown Json? // {"positive": 60, "negative": 20, "neutral": 20}
  
  @@unique([date])
}